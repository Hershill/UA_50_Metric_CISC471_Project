"""
pcov_test.py file that runs the unittests for pcov.py when the file is called or
run using the python CLI.

Group Project for CISC 471, Computational Biology.

By:
    - Andrew Ma (20030440)
    - Rayan Shaikli (20059806)
    - Hershil Devnani (20001045)

There are two ways to run the program, outlined below. Both methods run the
unittests.

Sample Usage:
  $ python -m unittest dna_test.py
  $ python -m main main.py
"""

import unittest
from pcov import pcov
from parsers import parse_gasm_data


class TestProgrammingProblemPCOV(unittest.TestCase):
    """Testing class for the required unittests
    """

    def test_pcov_positive_a(self):
        pcov_data = parse_gasm_data("rosalind_pcov_1.txt")
        superstring = pcov(pcov_data)
        solution = "ACAGATT"

        # make sure solution matches computed result
        self.assertEqual(solution, superstring)

    def test_pcov_positive_b(self):
        pcov_data = parse_gasm_data("rosalind_pcov_2.txt")
        superstring = pcov(pcov_data)
        solution = "GAATCCGGTCCAGTCATGGTCTCGGTTTACCAGGAGAGACTCGGCCGTCACTTACCG" \
                   "GAAGGTTATCGTTCCGCACTTCCGGGACGCCAAGGACATTGGACACGCGAGTCTAAT" \
                   "GTACAGGGGAACATAAGCTAGGCAAAGTTAGTATGAAAGACTTCCCGCTCAGCACAC" \
                   "TGACCAGCCCCCCTGTGTCTGAAATGCATGGCGGCATCTGCGTATATTAAATTCGAC" \
                   "CAAGGAAACATTGTAACACTATCGGACACCTTCAACAGCCTCGTTGCATTCCAGGAA" \
                   "ACAGTATTAGCCGAAACGGATTAACGCGGAGGGTGTATTTTCGCATCCACTAGGTGG" \
                   "TTTAATGTTCTAGCGAAGTTGCCGACTCCGCGGTTGGTCTCTCCATATTTCTAGAAT" \
                   "TTGTATAGGATAGCTCAGATCCAGTTAAGGTCTTTTTGGGGACTAAACGGTGCAAAC" \
                   "GTCCGTATCTATAACCATCCGTTTTAACTCGATATTTACACCTACCCACCTGCTTGA" \
                   "CCGTCGCAGGGCGTCGCGGAGCACACGTTACCCTACTTGCCACGCGACTTTTCCTGA" \
                   "TGTCAAAGGTGTTGTGTTAATTTTGTCGGACGAGCTATCTTTTGGCTCATTGCGAAC" \
                   "TTACAGCCCCGTACATGGCGGTGAGGCGTCTAGGGTCTCGAAGTTCCTAAAGCCCCG" \
                   "TGGCGTTTACAACCTACGAGGTCGATCGGTAAACGCCGACCCCCCAGGTGACTCGGC" \
                   "AGCATATAGTTCCTGCCGTGGCTCATAGTTTGACGGGTGTCTATATGTATACCAGTG" \
                   "TAGCAATCGTAGTTTCGTTAGTAGAATTACGACGCCCTACCTGTAGTTATCGCCAAG" \
                   "AAAAAAGTTACGTGGGGAGGGAAACGCAAAGGGTGGGTAGTTCAAAGACAGCCTAGT" \
                   "CTTTACCGGAACGACTCCGTTGAAGCGCCCTTGTAGCGTTCTACATCAGTACCTATC" \
                   "ATTCGATCCCACTTTAGCACCGGACCACCAGCATGACGAGGAATTGCGTTCCTCTTG" \
                   "GCCACCGGTGTACGGCAGCGGGTCTGCTAGCCCATGTTCAGGAACCCGATGAAAAGA" \
                   "CGCTCGTGCCACGGATGAACACTGCCGTAAGACACGAGATCTTTGTAGTCAGAAGGG" \
                   "CCGAAGAGTGACACTACACGGAAGCAGCCGCTGCACATATAAGGGCCTCCCGCGGGC" \
                   "GCCATCGTCCGCAACCCTTCCAATTCTGGAGCTCATGGTGTGACCTAACTAGAAGCA" \
                   "CCGAACAAAAGGTTATATTAGCCCGTCCCCCAGACCATAAATTGCTTGAAAACGGCA" \
                   "TCACTGTCACTATAAGGCTTTCGCGGTCTCGCGTTGCAGTTCGTGATTCAACAGAGA" \
                   "GCGCCACCGCCTTACGGTAAAGCAGACCGGGTCTATCTGCAAATGACGCCAGGGTTT" \
                   "GACATTATTAAAATAAATTGGGGTAGGGTATTATTTTCTTAGTCGGTAAGAATAAGC" \
                   "TGGGAAACACGTCCGCTTCCCTGACAGGCAACGAAACTAGCAGCGATCGCTGTCAAA" \
                   "ATTTTCGGCGCTCGCGGTTATCATCGGACCGCGGGCCCGGCTGCATACAAAACGCAC" \
                   "TGTTGATCTTGGGGATGCCGTGAAAATCGTATGATACAGATAGCTTGTGGACCCGCT" \
                   "TTCTTCGGGATGTGCCAGGCACGAACAAATTATTGGGCCTCTGCCTGACATAACAAA" \
                   "GGCACTGTGAAGAGTTCGTTTTCGTTAAGTAGCCCTTTGGGTCTGTGGCAACACGAC" \
                   "GCTTTTTCCCCCAGACAGAGGAGTCTCGCGTCACTTACCGGTTATACTACATACATA" \
                   "TTCAAAGTGAGCACCGGTTTTACGAGGGATTAACCAAAGCGTACCGGCGAACGACGC" \
                   "CTCGACTCTCTGTGGGAAGTAATCAGTGCTAAACGATCGACGAACTTTCATGCGATC" \
                   "AGCTACCTCACCCCATCCACGTCACAATAGAGCCAGGCGGGAGCGCCCGCCAAGATA" \
                   "GGTCG"

        # make sure solution matches computed result
        self.assertEqual(solution, superstring)

    def test_pcov_positive_c(self):
        pcov_data = parse_gasm_data("rosalind_pcov_3.txt")
        superstring = pcov(pcov_data)
        solution = "GGTGGCACGACCATTGTCATCGGCCAGGATATTATCCCGTTCTCTCTTCAATAGAAC" \
                   "TTGGGCTTTAACGAGGCTAGTATGGTAGAAGTGGGTACTACTACACAACAGTTACCT" \
                   "TAGTACATCGGGTGTGGTCCGACCCGGGCCAATTTAAGGATTTGGTTCTACTTCAAG" \
                   "AACTGTCTGATATGGTGAACAGCGTTAAGCGACCCGAGATCACGATAAATTAAAGCA" \
                   "TCCGTTTGGAAAGGAGGTAACAGACATTACACTAACGTTGAGCCATATATAAGAGGA" \
                   "TTGCGGTGCAATCTTGGAGTCAGCCAAGTCACTCTTTCTGCCAGCTTGCCTATAACA" \
                   "GTTTCGTCTTTCCTCCTTGCTCAGGACTGCCACCAGATAATATTTACTACGGAGGGG" \
                   "AAAGCCCAAAATTGACTTGAGCAACAGTACTAACTGCACAGTATCACGACACCAGTT" \
                   "GGCATGTAAACATGACGTCTCCTCACTAGGGCGTTCGTCTAGTATTCAGCCGCGCCG" \
                   "CATCGCCTTTCCGGTATCGAGATAGGGATAACGGTCAAGCTCGATAATGGACCTCGT" \
                   "CTCTATACTGTTTAGACCGGTGATCAGACCAGGGAGAGCGCCAAAACTCCCGCTGCT" \
                   "AGTTAATGAGTTGGAGGGATCCCGATCTTGGCGCGTTTGACGATGCTATCCCAGGTG" \
                   "AAGAGGCCGACCCTTGCGTAAGCCTAAATGCGCCGTGCTTTATGATAACACTCGACC" \
                   "TTGGGTGCCCCCTATGCCGAAATCCATTTGCTACTCATTGCGGCAATGGATTCGGTG" \
                   "GCAGACGCGCTGTTAGGACCTCTAACGTTCAAACGGTGCAGGGTCGATATCTACGCA" \
                   "ACTCTGACTCGACATCAGTCCGAGACAGACAACTAACTGCGTCCCACATTCGTTATA" \
                   "TGATATAACTCTTTCGGCAGGCTATTCACCCCATTTCTTCCCATAAAGCTTTGAAAA" \
                   "TTATATGCTAGCGACCGAAATGTGTTGAGGCGGGGACGCGGTCCGTGTGCGTTAGAA" \
                   "CGTAGGAGCTGGCCAAGTCCCGTCTCTAAAGCGCTGAAGGAAGATGTTGCTTTCCTT" \
                   "CCAAAGATCTCTGTTCGGGAAAAACTTGAAATTATGCAGCAGCCGCAAAATGCCATG" \
                   "ACGTCCGTTGCCGTTCCCGGGGAGAAACAAAAGGTACACTGTCAGGTAGCGTCCGTA" \
                   "ATTGGAACTTTCCAGACGCCTCACACCACAATTAATGCCAGATCCTGCGTTTTTATT" \
                   "CCTCTGCCATGTCTGCCCTGGGGCAGCCTTTCACAACTTTAATACACCGGGCCGGCA" \
                   "ATGATGGTTAATGGGTGACCCCTCTGTCCAGTTGGATTATATCCGATCTCAGAACCT" \
                   "GCTAACAACACCCGATCAGTCGACGGAATCACCACGGGATACGGTCCTACGGCAGCA" \
                   "CAAGCTGGACAGCAGAAGTTTATAATGAAATTAGGAACTTCAAGCCCATATGAAGTC" \
                   "TTAACACGTAGGGCACTTCGATACTGCAGTGTAATGAGTGTGAAATCAGTATGACAC" \
                   "CTTTGGGAAAGATACATCGGATAGCAGTGTCATTGAGCGCCTCTCAATCGGCACGGA" \
                   "TGGTGTCCGATAGCATGTATTTGGGAGAACCCAGCTAGGCGAAGTATACCAGATAGT" \
                   "GCAGTACTTTATTTGATTTCCGCCGCAGGTTACCAGATTCTGGAGGCCGGCGCTTCT" \
                   "ATATTTGAGCCCGCTACGAATGGATAAGAAAACAAGTATGCATCCTCCCAATATACG" \
                   "CTCGGTTCTGATGTGATTAGACCAATGGGGGGTGGCAACGCCTATCTAGCAAAAGTA" \
                   "GGACAGAGTCGCGTGTGCTGCATGATCACAAGATCTACTTGATGTCCCGTGACCACC" \
                   "GCTCTTAGTAAGAGCGTAGGAACGAGAGCTTCGAACCACGTAACCCCTCGGCGGAAT" \
                   "GCTGTTCGAGATAAACTCCTAAAACCAAGTTACAACCTTCATAGGACTACGGTGGGA" \
                   "AACCG"

        # make sure solution matches computed result
        self.assertEqual(solution, superstring)

    def test_pcov_negative(self):
        pcov_data = parse_gasm_data("rosalind_pcov_4.txt")
        superstring = pcov(pcov_data)
        solution = ""

        # make sure solution matches computed result
        self.assertEqual(solution, superstring)


if __name__ == '__main__':
    unittest.main()
